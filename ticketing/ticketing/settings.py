
"""

Django settings for ticketing project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@&tgh&_8%!i%+=76*dg(@y-e)f&7cj&rmyf&(*fg3x4*nis=_^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #local apps
    'store.apps.StoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ticketing.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticketing.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# ---------------------------------------- Database ----------------------------------------
import os


DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        "NAME": os.getenv("DB_NAME"),  # Fetch from environment variable
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),  # Default to 0.0.0.0 if not provided
        "PORT": int(os.getenv("DB_PORT", 5432)),  # Default to 5432 if not provided
        # "CONN_MAX_AGE": 300,  # Recommended: Keep connections alive for 5 minutes
        # "CONN_POOL_SIZE": 20,  # Adjust based on your server's resources
        # "OPTIONS": {
        #     "options": "-c statement_timeout=30000",  # 30 seconds timeout
        #     "keepalives": 1,
        #     "keepalives_idle": 30,
        #     "keepalives_interval": 10,
        #     "keepalives_count": 5,
        # },
        # "ATOMIC_REQUESTS": False,  # Consider True for transaction management
    },
    # Add more databases here, with their own configurations
    "replica_alpha": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": os.getenv("ALPHA_DB_NAME"),
        "USER": os.getenv("ALPHA_DB_USER"),
        "PASSWORD": os.getenv("ALPHA_DB_PASSWORD"),
        "HOST": os.getenv("ALPHA_DB_HOST"),
        "PORT": int(os.getenv("ALPHA_DB_PORT", 5432)),
        "OPTIONS": {"read_only": True},
    },
    "replica_beta": {
        "ENGINE": "django_tenants.postgresql_backend",
        "NAME": os.getenv("BETA_DB_NAME"),
        "USER": os.getenv("BETA_DB_USER"),
        "PASSWORD": os.getenv("BETA_DB_PASSWORD"),
        "HOST": os.getenv("BETA_DB_HOST"),
        "PORT": int(os.getenv("BETA_DB_PORT", 5432)),
        "OPTIONS": {"read_only": True},
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]


MEDIA_ROOT = os.path.join(BASE_DIR, 'static/upload')

MEDIA_URL = "/upload/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
